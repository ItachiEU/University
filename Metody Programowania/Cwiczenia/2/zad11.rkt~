#lang racket
;general stuff
(define (square x) (* x x x))
(define (average x y) (/ (+ x y) 2))
(define (dec x) (- x 1))

(define tolerance 0.00001)

;;fixed point
(define (fixed-point f first-guess) ;; z podrecznika
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

;dampening

(define (average-damp f)
  (lambda (x) (/ (+ x (f x)) 2)))

;repeated
(define (repeated p n) 
  (if(= n 0)
     (identity p)
     (compose p (repeated p (- n 1)))))
